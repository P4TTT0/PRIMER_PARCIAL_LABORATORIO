/*
 * censo.h
 *
 *  Created on: 23 may. 2022
 *      Author: PEREZ CARDENAL PATRICIO
 */

#ifndef CENSO_H_
#define CENSO_H_

#define TAM 30
#define LEN 2000
#define VACIO 1
#define OCUPADO -1

typedef struct
{
	int idVivienda;
	char calle[25];
	int cantidadPersonas;
	int cantidadHabitaciones;
	int tipoVivienda;
	int legajoCensista;
}sVivienda;

typedef struct
{
	int legajoCensista;
	char nombre[TAM];
	int edad;
	char telefono[10];
}sCensista;

typedef struct
{
	int tipoVivienda;
	char descripcionVivienda[TAM];
}sTipoVivienda;

/// @brief Funcion para inicializar todas las viviendas con el id VACIO (1).
///
/// @param lista Puntero a estructura de array de viviendas.
/// @param longitud Tamaño del array de viviendas.
void inicializarViviendas(sVivienda* lista, int longitud);

/// @brief Funcion para llenar los datos de una vivienda.
///
/// @param listaOpcionViviendas Puntero a estrucutra de array de los tipos de viviendas.
/// @param legajosCensista Puntero a estructura de array de los diferentes censistas.
/// @param error Puntero a variable que evalua si se han llenado todos los campos de la vivienda.
/// @return Retorna la vivienda.
sVivienda ingresarVivienda(sTipoVivienda* listaOpcionViviendas, sCensista* legajosCensista, int* error);

/// @brief Funcion para buscar un espacio VACIO (1) en el array de la lista de viviendas.
///
/// @param lista Puntero a estrucutra de array de la lista de viviendas.
/// @param longitud Tamaño del array de la lista de viviendas.
/// @return Retorna el indice en el que haya encontrado un espacio VACIO (1)
int buscarEspacioVacio(sVivienda* lista, int longitud);

/// @brief Funcion para buscar un espacio LLENO en el array de la lista de viviendas.
///
/// @param lista Puntero a estrucutra de array de la lista de viviendas.
/// @param longitud Tamaño del array de la lista de viviendas.
/// @return Retorna el indice en el que haya encontrado un espacio distinto a VACIO (1)
int buscarEspacioLleno(sVivienda* lista, int longitud);

/// @brief Funcion para cargar la vivienda anteriormente llenada dentro del array de la lista de viviendas.
///
/// @param lista Puntero a estrucutra de array de la lista de viviendas.
/// @param longitud longitud Tamaño del array de la lista de viviendas.
/// @param listaOpcionViviendas Puntero a estrucutra de array de los tipos de viviendas.
/// @param legajosCensista Puntero a estructura de array de los diferentes censistas.
/// @param error Puntero a variable que evalua si se han llenado todos los campos de la vivienda.
/// @return 0
int cargarVivienda(sVivienda* lista, int longitud, sTipoVivienda* listaOpcionViviendas, sCensista* legajosCensista, int* error);

int indiceTipoVivienda(int indiceTipoVivienda, sTipoVivienda* listaOpcionViviendas, int longitudOpciones);

int indiceCensista(int indiceLegajoCensista, sCensista* legajosCensista, int longitudCensita);

int buscarPasajeroPorId(sVivienda* lista, int longitud, int id);

int modificarVivienda(sVivienda* lista, int longitud, sTipoVivienda* listaOpcionViviendas, sCensista* legajosCensista);

int listarViviendas(sVivienda* lista, int longitud, sTipoVivienda* listOpcionViviendas, sCensista* legajosCensista);

int eliminarVivienda(sVivienda* lista, int longitud, sTipoVivienda* listaOpcionViviendas, sCensista* legajosCensista);

int ordenarViviendas(sVivienda* lista, int longitud);

int listarCensistas(sCensista* legajosCensista, int longitud);

#endif /* CENSO_H_ */
